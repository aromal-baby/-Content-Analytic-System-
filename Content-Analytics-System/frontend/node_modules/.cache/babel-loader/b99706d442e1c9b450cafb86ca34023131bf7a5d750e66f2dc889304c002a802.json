{"ast":null,"code":"import axios from 'axios';\nclass PlatformService {\n  // Base API endpoint\n  constructor() {\n    this.baseURL = '/api/platforms';\n  }\n\n  // Add a new platform\n  async addPlatform(platformData) {\n    try {\n      const response = await axios.post(`${this.baseURL}`, platformData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding platform:', error);\n      throw error;\n    }\n  }\n\n  // Get user's platforms\n  async getUserPlatforms() {\n    try {\n      const response = await axios.get(`${this.baseURL}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching platforms:', error);\n      throw error;\n    }\n  }\n\n  // Detect platform from URL\n  detectPlatform(url) {\n    const platformMappings = {\n      'youtube.com': {\n        name: 'YouTube',\n        icon: 'youtube',\n        color: 'text-red-500'\n      },\n      'instagram.com': {\n        name: 'Instagram',\n        icon: 'instagram',\n        color: 'text-pink-500'\n      },\n      'tiktok.com': {\n        name: 'TikTok',\n        icon: 'tiktok',\n        color: 'text-black'\n      },\n      'twitter.com': {\n        name: 'Twitter',\n        icon: 'twitter',\n        color: 'text-blue-400'\n      },\n      'twitch.tv': {\n        name: 'Twitch',\n        icon: 'twitch',\n        color: 'text-purple-500'\n      },\n      'facebook.com': {\n        name: 'Facebook',\n        icon: 'facebook',\n        color: 'text-blue-600'\n      }\n    };\n\n    // Find matching platform\n    const platform = Object.keys(platformMappings).find(key => url.toLowerCase().includes(key));\n    return platform ? platformMappings[platform] : {\n      name: 'Other',\n      icon: 'link',\n      color: 'text-gray-500'\n    };\n  }\n}\nexport default new PlatformService();","map":{"version":3,"names":["axios","PlatformService","constructor","baseURL","addPlatform","platformData","response","post","data","error","console","getUserPlatforms","get","detectPlatform","url","platformMappings","name","icon","color","platform","Object","keys","find","key","toLowerCase","includes"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/PlatformService.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass PlatformService {\r\n    // Base API endpoint\r\n    constructor() {\r\n        this.baseURL = '/api/platforms';\r\n    }\r\n\r\n    // Add a new platform\r\n    async addPlatform(platformData) {\r\n        try {\r\n            const response = await axios.post(`${this.baseURL}`, platformData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding platform:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Get user's platforms\r\n    async getUserPlatforms() {\r\n        try {\r\n            const response = await axios.get(`${this.baseURL}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching platforms:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    // Detect platform from URL\r\n    detectPlatform(url) {\r\n        const platformMappings = {\r\n            'youtube.com': {\r\n                name: 'YouTube',\r\n                icon: 'youtube',\r\n                color: 'text-red-500'\r\n            },\r\n            'instagram.com': {\r\n                name: 'Instagram',\r\n                icon: 'instagram',\r\n                color: 'text-pink-500'\r\n            },\r\n            'tiktok.com': {\r\n                name: 'TikTok',\r\n                icon: 'tiktok',\r\n                color: 'text-black'\r\n            },\r\n            'twitter.com': {\r\n                name: 'Twitter',\r\n                icon: 'twitter',\r\n                color: 'text-blue-400'\r\n            },\r\n            'twitch.tv': {\r\n                name: 'Twitch',\r\n                icon: 'twitch',\r\n                color: 'text-purple-500'\r\n            },\r\n            'facebook.com': {\r\n                name: 'Facebook',\r\n                icon: 'facebook',\r\n                color: 'text-blue-600'\r\n            }\r\n        };\r\n\r\n        // Find matching platform\r\n        const platform = Object.keys(platformMappings).find(key =>\r\n            url.toLowerCase().includes(key)\r\n        );\r\n\r\n        return platform\r\n            ? platformMappings[platform]\r\n            : {\r\n                name: 'Other',\r\n                icon: 'link',\r\n                color: 'text-gray-500'\r\n            };\r\n    }\r\n}\r\n\r\nexport default new PlatformService();\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,CAAC;EAClB;EACAC,WAAWA,CAAA,EAAG;IACV,IAAI,CAACC,OAAO,GAAG,gBAAgB;EACnC;;EAEA;EACA,MAAMC,WAAWA,CAACC,YAAY,EAAE;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMN,KAAK,CAACO,IAAI,CAAC,GAAG,IAAI,CAACJ,OAAO,EAAE,EAAEE,YAAY,CAAC;MAClE,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,MAAMA,KAAK;IACf;EACJ;;EAEA;EACA,MAAME,gBAAgBA,CAAA,EAAG;IACrB,IAAI;MACA,MAAML,QAAQ,GAAG,MAAMN,KAAK,CAACY,GAAG,CAAC,GAAG,IAAI,CAACT,OAAO,EAAE,CAAC;MACnD,OAAOG,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;;EAEA;EACAI,cAAcA,CAACC,GAAG,EAAE;IAChB,MAAMC,gBAAgB,GAAG;MACrB,aAAa,EAAE;QACXC,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE;MACX,CAAC;MACD,eAAe,EAAE;QACbF,IAAI,EAAE,WAAW;QACjBC,IAAI,EAAE,WAAW;QACjBC,KAAK,EAAE;MACX,CAAC;MACD,YAAY,EAAE;QACVF,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE;MACX,CAAC;MACD,aAAa,EAAE;QACXF,IAAI,EAAE,SAAS;QACfC,IAAI,EAAE,SAAS;QACfC,KAAK,EAAE;MACX,CAAC;MACD,WAAW,EAAE;QACTF,IAAI,EAAE,QAAQ;QACdC,IAAI,EAAE,QAAQ;QACdC,KAAK,EAAE;MACX,CAAC;MACD,cAAc,EAAE;QACZF,IAAI,EAAE,UAAU;QAChBC,IAAI,EAAE,UAAU;QAChBC,KAAK,EAAE;MACX;IACJ,CAAC;;IAED;IACA,MAAMC,QAAQ,GAAGC,MAAM,CAACC,IAAI,CAACN,gBAAgB,CAAC,CAACO,IAAI,CAACC,GAAG,IACnDT,GAAG,CAACU,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACF,GAAG,CAClC,CAAC;IAED,OAAOJ,QAAQ,GACTJ,gBAAgB,CAACI,QAAQ,CAAC,GAC1B;MACEH,IAAI,EAAE,OAAO;MACbC,IAAI,EAAE,MAAM;MACZC,KAAK,EAAE;IACX,CAAC;EACT;AACJ;AAEA,eAAe,IAAIjB,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}