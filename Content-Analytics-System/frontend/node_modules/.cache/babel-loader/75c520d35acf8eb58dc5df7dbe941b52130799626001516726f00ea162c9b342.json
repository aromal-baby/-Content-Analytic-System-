{"ast":null,"code":"import axios from 'axios';\nimport api from './ApiService';\nconst API_URL = 'http://localhost:8080/api/auth';\nclass AuthService {\n  async login(username, password) {\n    try {\n      console.log(\"Attempting login for user: \", username);\n      const response = await axios.post(`${API_URL}/login`, {\n        username,\n        password\n      });\n      if (response.data && response.data.token) {\n        console.log(' Login successful, token received');\n        localStorage.setItem('token', response.data.token);\n        console.log(\"Token saved\");\n      } else {\n        console.log(\"no Token in response\", response.data);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  }\n  async register(userData) {\n    console.log(\"Sending registration data:\", userData);\n    try {\n      const response = await axios.post(`${API_URL}/register`, userData);\n      console.log(\"Registration response:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Registration error\", error);\n      throw error;\n    }\n  }\n  async getCurrentUser() {\n    try {\n      console.log(\"Fetching current user data\");\n      const token = this.getToken();\n      if (!token) {\n        console.log(\"No token found\");\n        throw new Error(\"Not authenticated\");\n      }\n\n      // Use axios with the token in the header\n      const response = await axios.get(`${API_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log(\"User data fetched successfully\");\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Failed to get current user\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  getToken() {\n    const token = localStorage.getItem('token');\n    console.log(\"Retrieved token from localStorage:\", token ? \"Present\" : \"Not found\");\n    return token;\n  }\n  logout() {\n    console.log(\"Logging out, removing token\");\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","api","API_URL","AuthService","login","username","password","console","log","response","post","data","token","localStorage","setItem","error","_error$response","message","register","userData","getCurrentUser","getToken","Error","get","headers","_error$response2","getItem","logout","removeItem","isAuthenticated"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/AuthService.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport api from './ApiService';\r\n\r\nconst API_URL = 'http://localhost:8080/api/auth';\r\n\r\nclass AuthService {\r\n    async login(username, password) {\r\n        try {\r\n            console.log(\"Attempting login for user: \", username);\r\n            const response = await axios.post(`${API_URL}/login`, {username, password});\r\n\r\n            if (response.data && response.data.token) {\r\n                console.log(' Login successful, token received');\r\n                localStorage.setItem('token', response.data.token);\r\n                console.log(\"Token saved\")\r\n            } else {\r\n                console.log(\"no Token in response\", response.data);\r\n            }\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async register(userData) {\r\n        console.log(\"Sending registration data:\", userData);\r\n        try {\r\n            const response = await axios.post(`${API_URL}/register`, userData);\r\n            console.log(\"Registration response:\", response.data);\r\n            return response.data\r\n        } catch (error) {\r\n            console.error(\"Registration error\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        try {\r\n            console.log(\"Fetching current user data\");\r\n            const token = this.getToken();\r\n\r\n            if (!token) {\r\n                console.log(\"No token found\");\r\n                throw new Error(\"Not authenticated\");\r\n            }\r\n\r\n            // Use axios with the token in the header\r\n            const response = await axios.get(`${API_URL}/me`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            console.log(\"User data fetched successfully\");\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Failed to get current user\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getToken() {\r\n        const token = localStorage.getItem('token');\r\n        console.log(\"Retrieved token from localStorage:\", token ? \"Present\" : \"Not found\");\r\n        return token;    }\r\n\r\n    logout() {\r\n        console.log(\"Logging out, removing token\");\r\n        localStorage.removeItem('token');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return !!this.getToken();\r\n    }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,GAAG,MAAM,cAAc;AAE9B,MAAMC,OAAO,GAAG,gCAAgC;AAEhD,MAAMC,WAAW,CAAC;EACd,MAAMC,KAAKA,CAACC,QAAQ,EAAEC,QAAQ,EAAE;IAC5B,IAAI;MACAC,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEH,QAAQ,CAAC;MACpD,MAAMI,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGR,OAAO,QAAQ,EAAE;QAACG,QAAQ;QAAEC;MAAQ,CAAC,CAAC;MAE3E,IAAIG,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,KAAK,EAAE;QACtCL,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;QAChDK,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEL,QAAQ,CAACE,IAAI,CAACC,KAAK,CAAC;QAClDL,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC9B,CAAC,MAAM;QACHD,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MACtD;MAEA,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA,IAAAC,eAAA;MACZT,OAAO,CAACQ,KAAK,CAAC,eAAe,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACN,QAAQ,cAAAO,eAAA,uBAAdA,eAAA,CAAgBL,IAAI,KAAII,KAAK,CAACE,OAAO,CAAC;MACrE,MAAMF,KAAK;IACf;EACJ;EAEA,MAAMG,QAAQA,CAACC,QAAQ,EAAE;IACrBZ,OAAO,CAACC,GAAG,CAAC,4BAA4B,EAAEW,QAAQ,CAAC;IACnD,IAAI;MACA,MAAMV,QAAQ,GAAG,MAAMT,KAAK,CAACU,IAAI,CAAC,GAAGR,OAAO,WAAW,EAAEiB,QAAQ,CAAC;MAClEZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,QAAQ,CAACE,IAAI,CAAC;MACpD,OAAOF,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MACZR,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C,MAAMA,KAAK;IACf;EACJ;EAEA,MAAMK,cAAcA,CAAA,EAAG;IACnB,IAAI;MACAb,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;MACzC,MAAMI,KAAK,GAAG,IAAI,CAACS,QAAQ,CAAC,CAAC;MAE7B,IAAI,CAACT,KAAK,EAAE;QACRL,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;QAC7B,MAAM,IAAIc,KAAK,CAAC,mBAAmB,CAAC;MACxC;;MAEA;MACA,MAAMb,QAAQ,GAAG,MAAMT,KAAK,CAACuB,GAAG,CAAC,GAAGrB,OAAO,KAAK,EAAE;QAC9CsB,OAAO,EAAE;UACL,eAAe,EAAE,UAAUZ,KAAK;QACpC;MACJ,CAAC,CAAC;MAEFL,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;MAC7C,OAAOC,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOI,KAAK,EAAE;MAAA,IAAAU,gBAAA;MACZlB,OAAO,CAACQ,KAAK,CAAC,4BAA4B,EAAE,EAAAU,gBAAA,GAAAV,KAAK,CAACN,QAAQ,cAAAgB,gBAAA,uBAAdA,gBAAA,CAAgBd,IAAI,KAAII,KAAK,CAACE,OAAO,CAAC;MAClF,MAAMF,KAAK;IACf;EACJ;EAEAM,QAAQA,CAAA,EAAG;IACP,MAAMT,KAAK,GAAGC,YAAY,CAACa,OAAO,CAAC,OAAO,CAAC;IAC3CnB,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEI,KAAK,GAAG,SAAS,GAAG,WAAW,CAAC;IAClF,OAAOA,KAAK;EAAK;EAErBe,MAAMA,CAAA,EAAG;IACLpB,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC1CK,YAAY,CAACe,UAAU,CAAC,OAAO,CAAC;EACpC;EAEAC,eAAeA,CAAA,EAAG;IACd,OAAO,CAAC,CAAC,IAAI,CAACR,QAAQ,CAAC,CAAC;EAC5B;AACJ;AAEA,eAAe,IAAIlB,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}