{"ast":null,"code":"import axios from 'axios';\nimport api from './ApiService';\nconst API_URL = 'http://localhost:8080/api/auth';\nclass AuthService {\n  async login(username, password) {\n    try {\n      console.log(\"Attempting login for user:\", username);\n      const response = await axios.post(`${API_URL}/login`, {\n        username,\n        password\n      });\n      if (response.data && response.data.token) {\n        const token = response.data.token;\n        console.log(\"Login successful, token received:\", token.substring(0, 10) + \"...\");\n        localStorage.setItem('token', token);\n        console.log(\"Token saved to localStorage\");\n\n        // Wait a moment to ensure token is saved\n        await new Promise(resolve => setTimeout(resolve, 100));\n\n        // Verify token was saved\n        const savedToken = localStorage.getItem('token');\n        console.log(\"Verified token in storage:\", savedToken ? \"Present\" : \"Missing\", savedToken ? savedToken.substring(0, 10) + \"...\" : \"\");\n      } else {\n        console.error(\"No token in login response:\", response.data);\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response;\n      console.error(\"Login failed:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n      throw error;\n    }\n  }\n  async register(userData) {\n    console.log(\"Sending registration data:\", userData);\n    try {\n      const response = await axios.post(`${API_URL}/register`, userData);\n      console.log(\"Registration response:\", response.data);\n      return response.data;\n    } catch (error) {\n      console.error(\"Registration error\", error);\n      throw error;\n    }\n  }\n  async getCurrentUser() {\n    try {\n      console.log(\"Fetching current user data\");\n      const token = this.getToken();\n      if (!token) {\n        console.log(\"No token found\");\n        throw new Error(\"Not authenticated\");\n      }\n\n      // Use axios with the token in the header\n      const response = await axios.get(`${API_URL}/me`, {\n        headers: {\n          'Authorization': `Bearer ${token}`\n        }\n      });\n      console.log(\"User data fetched successfully\");\n      return response.data;\n    } catch (error) {\n      var _error$response2;\n      console.error(\"Failed to get current user\", ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || error.message);\n      throw error;\n    }\n  }\n  getToken() {\n    const token = localStorage.getItem('token');\n    console.log(\"Retrieved token from localStorage:\", token ? \"Present\" : \"Not found\");\n    return token;\n  }\n  async logout() {\n    console.log(\"Logging out, removing token\");\n    localStorage.removeItem('token');\n  }\n  isAuthenticated() {\n    return !!this.getToken();\n  }\n}\nexport default new AuthService();","map":{"version":3,"names":["axios","api","API_URL","AuthService","login","username","password","console","log","response","post","data","token","substring","localStorage","setItem","Promise","resolve","setTimeout","savedToken","getItem","error","_error$response","message","register","userData","getCurrentUser","getToken","Error","get","headers","_error$response2","logout","removeItem","isAuthenticated"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/AuthService.jsx"],"sourcesContent":["import axios from 'axios';\r\nimport api from './ApiService';\r\n\r\nconst API_URL = 'http://localhost:8080/api/auth';\r\n\r\nclass AuthService {\r\n    async login(username, password) {\r\n        try {\r\n            console.log(\"Attempting login for user:\", username);\r\n            const response = await axios.post(`${API_URL}/login`, {username, password});\r\n\r\n            if (response.data && response.data.token) {\r\n                const token = response.data.token;\r\n                console.log(\"Login successful, token received:\", token.substring(0, 10) + \"...\");\r\n                localStorage.setItem('token', token);\r\n                console.log(\"Token saved to localStorage\");\r\n\r\n                // Wait a moment to ensure token is saved\r\n                await new Promise(resolve => setTimeout(resolve, 100));\r\n\r\n                // Verify token was saved\r\n                const savedToken = localStorage.getItem('token');\r\n                console.log(\"Verified token in storage:\", savedToken ? \"Present\" : \"Missing\",\r\n                    savedToken ? savedToken.substring(0, 10) + \"...\" : \"\");\r\n            } else {\r\n                console.error(\"No token in login response:\", response.data);\r\n            }\r\n\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Login failed:\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async register(userData) {\r\n        console.log(\"Sending registration data:\", userData);\r\n        try {\r\n            const response = await axios.post(`${API_URL}/register`, userData);\r\n            console.log(\"Registration response:\", response.data);\r\n            return response.data\r\n        } catch (error) {\r\n            console.error(\"Registration error\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async getCurrentUser() {\r\n        try {\r\n            console.log(\"Fetching current user data\");\r\n            const token = this.getToken();\r\n\r\n            if (!token) {\r\n                console.log(\"No token found\");\r\n                throw new Error(\"Not authenticated\");\r\n            }\r\n\r\n            // Use axios with the token in the header\r\n            const response = await axios.get(`${API_URL}/me`, {\r\n                headers: {\r\n                    'Authorization': `Bearer ${token}`\r\n                }\r\n            });\r\n\r\n            console.log(\"User data fetched successfully\");\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(\"Failed to get current user\", error.response?.data || error.message);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    getToken() {\r\n        const token = localStorage.getItem('token');\r\n        console.log(\"Retrieved token from localStorage:\", token ? \"Present\" : \"Not found\");\r\n        return token;    }\r\n\r\n    async logout() {\r\n        console.log(\"Logging out, removing token\");\r\n        localStorage.removeItem('token');\r\n    }\r\n\r\n    isAuthenticated() {\r\n        return !!this.getToken();\r\n    }\r\n}\r\n\r\nexport default new AuthService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}