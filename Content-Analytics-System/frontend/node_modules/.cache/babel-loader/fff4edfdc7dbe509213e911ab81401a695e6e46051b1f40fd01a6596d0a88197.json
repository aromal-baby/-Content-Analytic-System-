{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport platformService from \"../../services/PlatformService\";\nconst addPlatformModal = ({\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const [contentLink, setContentLink] = useState('');\n  const [error, setError] = useState('');\n\n  // To detect platform and content type from URL\n  const detectPlatformInfo = url => {\n    // Platform detection patterns\n    if (url.includes('youtube.com') || url.includes('youtu.be')) {\n      // YouTube detection\n      let videoId = '';\n      if (url.includes('watch?v=')) {\n        // Regular video\n        videoId = url.split('watch?v=')[1].split('&')[0];\n      } else if (url.includes('youtu.be/')) {\n        // Short\n        videoId = url.split('youtu.be/')[1].split('?')[0];\n      } else if (url.includes('shorts/')) {\n        // Shorts\n        videoId = url.split('shorts/')[1].split('?')[0];\n      }\n      return {\n        platform: 'YouTube',\n        contentId: videoId,\n        contentType: url.includes('shorts/') ? 'SHORT' : 'VIDEO'\n      };\n    } else if (url.includes('instagram.com')) {\n      // Ig detection\n      let contentId = '';\n      let contentType = 'POST';\n      if (url.includes('/p/')) {\n        // Regular post\n        contentId = url.split('/p/')[1].split('/')[0];\n      } else if (url.includes('/reel/')) {\n        // Reel\n        contentId = url.split('/reel/')[1].split('/')[0];\n        contentType = 'REEL';\n      } else if (url.includes('/stories/')) {\n        // Story\n        contentId = url.split('/stories/')[1].split('/')[1];\n        contentType = 'STORY';\n      }\n      return {\n        platform: 'Instagram',\n        contentId: contentId,\n        contentType: contentType\n      };\n    } else if (url.includes('tiktok.com')) {\n      // TikTok detection\n      let contentId = '';\n      if (url.includes('/video/')) {\n        contentId = url.split('/video/')[1].split('?')[0];\n      }\n      return {\n        platform: 'TikTok',\n        contentId: contentId,\n        contentType: 'VIDEO'\n      };\n    }\n\n    // Default return for unrecognized\n    return {\n      platform: 'Other',\n      contentId: '',\n      contentType: 'UNKNOWN'\n    };\n  };\n};\n_s(addPlatformModal, \"2SJMgsHIzrHk44s92QmXazd+NFo=\");","map":{"version":3,"names":["React","useState","platformService","addPlatformModal","isOpen","onClose","_s","contentLink","setContentLink","error","setError","detectPlatformInfo","url","includes","videoId","split","platform","contentId","contentType"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/components/Platforms/AddPlatformModal.jsx"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport platformService from \"../../services/PlatformService\";\r\n\r\nconst addPlatformModal = ({ isOpen, onClose }) => {\r\n    const [contentLink, setContentLink] = useState('');\r\n    const [error, setError] = useState('');\r\n\r\n    // To detect platform and content type from URL\r\n    const detectPlatformInfo = (url) => {\r\n        // Platform detection patterns\r\n        if (url.includes('youtube.com') || url.includes('youtu.be')) {\r\n            // YouTube detection\r\n            let videoId = '';\r\n\r\n            if (url.includes('watch?v=')){\r\n                // Regular video\r\n                videoId = url.split('watch?v=')[1].split('&')[0];\r\n            } else if (url.includes('youtu.be/')) {\r\n                // Short\r\n                videoId = url.split('youtu.be/')[1].split('?')[0];\r\n            } else if (url.includes('shorts/')) {\r\n                // Shorts\r\n                videoId = url.split('shorts/')[1].split('?')[0];\r\n            }\r\n\r\n            return {\r\n                platform: 'YouTube',\r\n                contentId: videoId,\r\n                contentType: url.includes('shorts/') ? 'SHORT' : 'VIDEO'\r\n            };\r\n        } else if (url.includes('instagram.com')) {\r\n            // Ig detection\r\n            let contentId = '';\r\n            let contentType = 'POST';\r\n\r\n            if (url.includes('/p/')) {\r\n                // Regular post\r\n                contentId = url.split('/p/')[1].split('/')[0];\r\n            } else if (url.includes('/reel/')) {\r\n                // Reel\r\n                contentId = url.split('/reel/')[1].split('/')[0];\r\n                contentType = 'REEL';\r\n            } else if (url.includes('/stories/')) {\r\n                // Story\r\n                contentId = url.split('/stories/')[1].split('/')[1];\r\n                contentType = 'STORY';\r\n            }\r\n\r\n            return {\r\n                platform: 'Instagram',\r\n                contentId: contentId,\r\n                contentType: contentType\r\n            };\r\n        } else if (url.includes('tiktok.com')) {\r\n            // TikTok detection\r\n            let contentId = '';\r\n\r\n            if (url.includes('/video/')) {\r\n                contentId = url.split('/video/')[1].split('?')[0];\r\n            }\r\n\r\n            return {\r\n                platform: 'TikTok',\r\n                contentId: contentId,\r\n                contentType: 'VIDEO'\r\n            };\r\n        }\r\n\r\n        // Default return for unrecognized\r\n        return {\r\n            platform: 'Other',\r\n            contentId: '',\r\n            contentType: 'UNKNOWN'\r\n        };\r\n\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}