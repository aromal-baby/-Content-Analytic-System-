{"ast":null,"code":"import axios from 'axios';\nclass PlatformService {\n  constructor() {\n    // Use environment variable with fallback\n    this.baseURL = 'http://localhost:8080/api';\n    this.platformsURL = `${this.baseURL}/platforms`;\n    this.contentURL = `${this.baseURL}/content`;\n  }\n\n  // Platform methods\n  async getUserPlatforms() {\n    try {\n      const response = await axios.get(this.platformsURL);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching platforms:', error);\n      throw error;\n    }\n  }\n  async addPlatform(platformData) {\n    try {\n      console.log(\"Adding platform with data:\", platformData);\n      const response = await axios.post(this.platformsURL, platformData);\n      console.log(\"Platform creation response:\", response);\n\n      // Properly handle potentially stringified data\n      let platformData;\n      if (typeof response.data === 'string') {\n        try {\n          platformData = JSON.parse(response.data);\n        } catch (parseError) {\n          console.error(\"Error parsing platform data:\", parseError);\n          platformData = {\n            id: null\n          };\n        }\n      } else {\n        platformData = response.data;\n      }\n      return {\n        success: true,\n        data: platformData,\n        // Now always an object, not a string\n        status: response.status\n      };\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding platform:', error);\n      return {\n        success: false,\n        error: error.message,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n      };\n    }\n  }\n\n  // Content methods\n  async addContent(contentData) {\n    try {\n      const response = await axios.post(this.contentURL, contentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding content:', error);\n      throw error;\n    }\n  }\n  async getContentByPlatform(platformId) {\n    try {\n      const response = await axios.get(`${this.platformsURL}/${platformId}/content`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching content:', error);\n      throw error;\n    }\n  }\n}\nexport default new PlatformService();","map":{"version":3,"names":["axios","PlatformService","constructor","baseURL","platformsURL","contentURL","getUserPlatforms","response","get","data","error","console","addPlatform","platformData","log","post","JSON","parse","parseError","id","success","status","_error$response","message","addContent","contentData","getContentByPlatform","platformId"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/PlatformService.jsx"],"sourcesContent":["import axios from 'axios';\r\n\r\nclass PlatformService {\r\n    constructor() {\r\n        // Use environment variable with fallback\r\n        this.baseURL = 'http://localhost:8080/api';\r\n        this.platformsURL = `${this.baseURL}/platforms`;\r\n        this.contentURL = `${this.baseURL}/content`;\r\n    }\r\n\r\n    // Platform methods\r\n    async getUserPlatforms() {\r\n        try {\r\n            const response = await axios.get(this.platformsURL);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching platforms:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async addPlatform(platformData) {\r\n        try {\r\n            console.log(\"Adding platform with data:\", platformData);\r\n            const response = await axios.post(this.platformsURL, platformData);\r\n            console.log(\"Platform creation response:\", response);\r\n\r\n            // Properly handle potentially stringified data\r\n            let platformData;\r\n            if (typeof response.data === 'string') {\r\n                try {\r\n                    platformData = JSON.parse(response.data);\r\n                } catch (parseError) {\r\n                    console.error(\"Error parsing platform data:\", parseError);\r\n                    platformData = { id: null };\r\n                }\r\n            } else {\r\n                platformData = response.data;\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                data: platformData,  // Now always an object, not a string\r\n                status: response.status\r\n            };\r\n        } catch (error) {\r\n            console.error('Error adding platform:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message,\r\n                status: error.response?.status\r\n            };\r\n        }\r\n    }\r\n\r\n    // Content methods\r\n    async addContent(contentData) {\r\n        try {\r\n            const response = await axios.post(this.contentURL, contentData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding content:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async getContentByPlatform(platformId) {\r\n        try {\r\n            const response = await axios.get(`${this.platformsURL}/${platformId}/content`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching content:', error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new PlatformService();"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,eAAe,CAAC;EAClBC,WAAWA,CAAA,EAAG;IACV;IACA,IAAI,CAACC,OAAO,GAAG,2BAA2B;IAC1C,IAAI,CAACC,YAAY,GAAG,GAAG,IAAI,CAACD,OAAO,YAAY;IAC/C,IAAI,CAACE,UAAU,GAAG,GAAG,IAAI,CAACF,OAAO,UAAU;EAC/C;;EAEA;EACA,MAAMG,gBAAgBA,CAAA,EAAG;IACrB,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,IAAI,CAACJ,YAAY,CAAC;MACnD,OAAOG,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACf;EACJ;EAEA,MAAME,WAAWA,CAACC,YAAY,EAAE;IAC5B,IAAI;MACAF,OAAO,CAACG,GAAG,CAAC,4BAA4B,EAAED,YAAY,CAAC;MACvD,MAAMN,QAAQ,GAAG,MAAMP,KAAK,CAACe,IAAI,CAAC,IAAI,CAACX,YAAY,EAAES,YAAY,CAAC;MAClEF,OAAO,CAACG,GAAG,CAAC,6BAA6B,EAAEP,QAAQ,CAAC;;MAEpD;MACA,IAAIM,YAAY;MAChB,IAAI,OAAON,QAAQ,CAACE,IAAI,KAAK,QAAQ,EAAE;QACnC,IAAI;UACAI,YAAY,GAAGG,IAAI,CAACC,KAAK,CAACV,QAAQ,CAACE,IAAI,CAAC;QAC5C,CAAC,CAAC,OAAOS,UAAU,EAAE;UACjBP,OAAO,CAACD,KAAK,CAAC,8BAA8B,EAAEQ,UAAU,CAAC;UACzDL,YAAY,GAAG;YAAEM,EAAE,EAAE;UAAK,CAAC;QAC/B;MACJ,CAAC,MAAM;QACHN,YAAY,GAAGN,QAAQ,CAACE,IAAI;MAChC;MAEA,OAAO;QACHW,OAAO,EAAE,IAAI;QACbX,IAAI,EAAEI,YAAY;QAAG;QACrBQ,MAAM,EAAEd,QAAQ,CAACc;MACrB,CAAC;IACL,CAAC,CAAC,OAAOX,KAAK,EAAE;MAAA,IAAAY,eAAA;MACZX,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;MAC9C,OAAO;QACHU,OAAO,EAAE,KAAK;QACdV,KAAK,EAAEA,KAAK,CAACa,OAAO;QACpBF,MAAM,GAAAC,eAAA,GAAEZ,KAAK,CAACH,QAAQ,cAAAe,eAAA,uBAAdA,eAAA,CAAgBD;MAC5B,CAAC;IACL;EACJ;;EAEA;EACA,MAAMG,UAAUA,CAACC,WAAW,EAAE;IAC1B,IAAI;MACA,MAAMlB,QAAQ,GAAG,MAAMP,KAAK,CAACe,IAAI,CAAC,IAAI,CAACV,UAAU,EAAEoB,WAAW,CAAC;MAC/D,OAAOlB,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,MAAMA,KAAK;IACf;EACJ;EAGA,MAAMgB,oBAAoBA,CAACC,UAAU,EAAE;IACnC,IAAI;MACA,MAAMpB,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAC,GAAG,IAAI,CAACJ,YAAY,IAAIuB,UAAU,UAAU,CAAC;MAC9E,OAAOpB,QAAQ,CAACE,IAAI;IACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAMA,KAAK;IACf;EACJ;AACJ;AAEA,eAAe,IAAIT,eAAe,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}