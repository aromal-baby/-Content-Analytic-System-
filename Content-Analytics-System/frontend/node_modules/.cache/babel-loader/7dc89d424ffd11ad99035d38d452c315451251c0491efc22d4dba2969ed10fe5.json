{"ast":null,"code":"import api from './ApiService';\nclass MetricsService {\n  async getMetricsSummary() {\n    try {\n      const response = await api.get('/metrics/summary');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching metrics summary:', error);\n      return {\n        totalViews: 0,\n        totalLikes: 0,\n        totalComments: 0,\n        averageEngagementRate: 0.0\n      };\n    }\n  }\n  async getTimeSeriesData() {\n    try {\n      const response = await api.get('/metrics/timeseries');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching time series data:', error);\n      return [];\n    }\n  }\n  async getContentTimeSeriesData(contentId) {\n    try {\n      const response = await api.get(`/metrics/content/${contentId}/timeseries`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching time series data for content ${contentId}:`, error);\n      return [];\n    }\n  }\n  async getMetricsByPlatform() {\n    try {\n      const response = await api.get('/metrics/by-platform');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching platform metrics:', error);\n      return [];\n    }\n  }\n\n  // New method to get metrics for a specific platform\n  async getPlatformSpecificMetrics(platformId) {\n    try {\n      const response = await api.get(`/metrics/platform/${platformId}`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching metrics for platform ${platformId}:`, error);\n      return null;\n    }\n  }\n\n  // New method for time series data for a specific platform\n  async getPlatformTimeSeriesData(platformId) {\n    try {\n      const response = await api.get(`/metrics/platform/${platformId}/timeseries`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching time series data for platform ${platformId}:`, error);\n      return [];\n    }\n  }\n  async refreshContentMetrics(contentId) {\n    try {\n      await api.post(`/metrics/refresh/${contentId}`);\n      return true;\n    } catch (error) {\n      console.error('Error refreshing metrics:', error);\n      return false;\n    }\n  }\n\n  // Add this to your MetricsService.jsx\n  async getPlatformContentList(platformId) {\n    try {\n      const response = await api.get(`/metrics/platform/${platformId}/contents`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error fetching content list for platform ${platformId}:`, error);\n      return [];\n    }\n  }\n\n  // For refreshing the metrics real-time\n  async refreshPlatformMetrics(platformId) {\n    try {\n      const response = await api.post(`/metrics/platform/${platformId}/refresh`);\n      return response.data;\n    } catch (error) {\n      console.error(`Error refreshing metrics for platform ${platformId}:`, error);\n      throw error;\n    }\n  }\n}\nexport default new MetricsService();","map":{"version":3,"names":["api","MetricsService","getMetricsSummary","response","get","data","error","console","totalViews","totalLikes","totalComments","averageEngagementRate","getTimeSeriesData","getContentTimeSeriesData","contentId","getMetricsByPlatform","getPlatformSpecificMetrics","platformId","getPlatformTimeSeriesData","refreshContentMetrics","post","getPlatformContentList","refreshPlatformMetrics"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/MetricsService.jsx"],"sourcesContent":["import api from './ApiService';\r\n\r\nclass MetricsService {\r\n    async getMetricsSummary() {\r\n        try {\r\n            const response = await api.get('/metrics/summary');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching metrics summary:', error);\r\n            return {\r\n                totalViews: 0,\r\n                totalLikes: 0,\r\n                totalComments: 0,\r\n                averageEngagementRate: 0.0\r\n            };\r\n        }\r\n    }\r\n\r\n    async getTimeSeriesData() {\r\n        try {\r\n            const response = await api.get('/metrics/timeseries');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching time series data:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async getContentTimeSeriesData(contentId) {\r\n        try {\r\n            const response = await api.get(`/metrics/content/${contentId}/timeseries`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching time series data for content ${contentId}:`, error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async getMetricsByPlatform() {\r\n        try {\r\n            const response = await api.get('/metrics/by-platform');\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching platform metrics:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // New method to get metrics for a specific platform\r\n    async getPlatformSpecificMetrics(platformId) {\r\n        try {\r\n            const response = await api.get(`/metrics/platform/${platformId}`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching metrics for platform ${platformId}:`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    // New method for time series data for a specific platform\r\n    async getPlatformTimeSeriesData(platformId) {\r\n        try {\r\n            const response = await api.get(`/metrics/platform/${platformId}/timeseries`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching time series data for platform ${platformId}:`, error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    async refreshContentMetrics(contentId) {\r\n        try {\r\n            await api.post(`/metrics/refresh/${contentId}`);\r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error refreshing metrics:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    // Add this to your MetricsService.jsx\r\n    async getPlatformContentList(platformId) {\r\n        try {\r\n            const response = await api.get(`/metrics/platform/${platformId}/contents`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error fetching content list for platform ${platformId}:`, error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    // For refreshing the metrics real-time\r\n    async refreshPlatformMetrics(platformId) {\r\n        try {\r\n            const response = await api.post(`/metrics/platform/${platformId}/refresh`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error(`Error refreshing metrics for platform ${platformId}:`, error);\r\n            throw error;\r\n        }\r\n    }\r\n}\r\n\r\nexport default new MetricsService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}