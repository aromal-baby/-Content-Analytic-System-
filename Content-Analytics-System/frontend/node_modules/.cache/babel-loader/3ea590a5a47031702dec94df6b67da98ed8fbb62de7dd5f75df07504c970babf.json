{"ast":null,"code":"var _jsxFileName = \"E:\\\\Official\\\\University\\\\Content Analytics v4\\\\Content-Analytics-System\\\\frontend\\\\src\\\\components\\\\Platforms\\\\AddPlatformModal.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport platformService from '../../services/PlatformService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddPlatformModal = ({\n  isOpen,\n  onClose\n}) => {\n  _s();\n  const [contentLink, setContentLink] = useState('');\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n  const [connectedPlatforms, setConnectedPlatforms] = useState([]);\n\n  // Fetch already connected platforms when modal opens\n  useEffect(() => {\n    if (isOpen) {\n      fetchConnectedPlatforms();\n    }\n  }, [isOpen]);\n  const fetchConnectedPlatforms = async () => {\n    try {\n      const platforms = await platformService.getUserPlatforms();\n      setConnectedPlatforms(platforms);\n    } catch (error) {\n      console.error(\"Error fetching platforms:\", error);\n    }\n  };\n\n  // Function to detect platform and content info from URL\n  const detectPlatformInfo = url => {\n    // Platform detection patterns\n    if (url.includes('youtube.com') || url.includes('youtu.be')) {\n      let videoId = '';\n      if (url.includes('watch?v=')) {\n        videoId = url.split('watch?v=')[1].split('&')[0];\n      } else if (url.includes('youtu.be/')) {\n        videoId = url.split('youtu.be/')[1].split('?')[0];\n      } else if (url.includes('shorts/')) {\n        videoId = url.split('shorts/')[1].split('?')[0];\n      }\n      return {\n        platformName: 'YouTube',\n        contentId: videoId,\n        contentType: url.includes('shorts/') ? 'SHORT' : 'VIDEO'\n      };\n    } else if (url.includes('instagram.com')) {\n      let contentId = '';\n      let contentType = 'POST';\n      if (url.includes('/p/')) {\n        contentId = url.split('/p/')[1].split('/')[0];\n      } else if (url.includes('/reel/')) {\n        contentId = url.split('/reel/')[1].split('/')[0];\n        contentType = 'REEL';\n      } else if (url.includes('/stories/')) {\n        contentId = url.split('/stories/')[1].split('/')[1];\n        contentType = 'STORY';\n      }\n      return {\n        platformName: 'Instagram',\n        contentId: contentId,\n        contentType: contentType\n      };\n    } else if (url.includes('tiktok.com')) {\n      let contentId = '';\n      if (url.includes('/video/')) {\n        contentId = url.split('/video/')[1].split('?')[0];\n      }\n      return {\n        platformName: 'TikTok',\n        contentId: contentId,\n        contentType: 'VIDEO'\n      };\n    } else if (url.includes('twitter.com') || url.includes('x.com')) {\n      let contentId = '';\n      if (url.includes('/status/')) {\n        contentId = url.split('/status/')[1].split('?')[0];\n      }\n      return {\n        platformName: 'Twitter',\n        contentId: contentId,\n        contentType: 'TWEET'\n      };\n    }\n    return {\n      platformName: 'Other',\n      contentId: '',\n      contentType: 'UNKNOWN'\n    };\n  };\n\n  // Handle adding content and platform if needed\n  const handleAddContent = async () => {\n    if (!contentLink.trim()) {\n      setError('Please enter a valid content link');\n      return;\n    }\n    setLoading(true);\n    try {\n      // Detect platform and content info\n      console.log(\"Processing link:\", contentLink);\n      const contentInfo = detectPlatformInfo(contentLink);\n      console.log(\"Detected:\", contentInfo);\n      if (contentInfo.contentId === '') {\n        setError('Could not detect content ID from the provided link');\n        setLoading(false);\n        return;\n      }\n\n      // Check if platform is already connected\n      const platformExists = Array.isArray(connectedPlatforms) ? connectedPlatforms.some(platform => platform.platformName === contentInfo.platformName) : false;\n      let platformId;\n      console.log(\"Sending to API:\", {\n        platformId,\n        contentId: contentInfo.contentId,\n        contentType: contentInfo.contentType\n      });\n\n      // If platform doesn't exist, create it first\n      if (!platformExists) {\n        try {\n          // Create the platform with more detailed logs\n          console.log(\"Creating platform with name:\", contentInfo.platformName);\n          const createResult = await platformService.addPlatform({\n            platformName: contentInfo.platformName,\n            url: contentLink\n          });\n          console.log(\"Platform creation result:\", createResult);\n\n          // Check if creation was successful\n          if (!createResult.success) {\n            throw new Error(`Platform creation failed: ${createResult.error}`);\n          }\n\n          // Try to get the ID directly from the creation response\n          if (createResult.data && createResult.data.id) {\n            platformId = createResult.data.id;\n            console.log(\"Got platform ID directly from creation response:\", platformId);\n          } else {\n            // Wait briefly then try to get all platforms\n            await new Promise(resolve => setTimeout(resolve, 1000));\n\n            // Fetch all platforms\n            const platforms = await platformService.getUserPlatforms();\n            console.log(\"All platforms after creation:\", platforms);\n\n            // If we got an array directly\n            const platformsArray = Array.isArray(platforms) ? platforms : platforms && Array.isArray(platforms.data) ? platforms.data : [];\n            if (platformsArray.length === 0) {\n              throw new Error(\"No platforms found after creation\");\n            }\n\n            // Try to find by name\n            const matchedPlatform = platformsArray.find(p => p.platformName === contentInfo.platformName);\n            if (matchedPlatform) {\n              platformId = matchedPlatform.id;\n              console.log(\"Found platform by name match:\", platformId);\n            } else {\n              // Last resort - use the most recently created platform\n              platformId = platformsArray[platformsArray.length - 1].id;\n              console.log(\"Using most recent platform as fallback:\", platformId);\n            }\n          }\n        } catch (error) {\n          console.error(\"Error in platform creation flow:\", error);\n          setError(`Platform creation failed: ${error.message}`);\n          setLoading(false);\n          return;\n        }\n      } else {\n        // Find existing platform ID\n        const platform = connectedPlatforms.find(p => p.platformName === contentInfo.platformName);\n        if (!platform || !platform.id) {\n          console.error(\"Could not find existing platform ID\");\n          setError(\"Error: Could not find platform ID\");\n          setLoading(false);\n          return;\n        }\n        platformId = platform.id;\n        console.log(\"Using existing platform ID:\", platformId);\n      }\n\n      // Now check that platformId is valid before proceeding\n      if (!platformId) {\n        setError(\"Error: Missing platform ID\");\n        setLoading(false);\n        return;\n      }\n\n      // Now add the content to the platform\n      await platformService.addContent({\n        platformId: platformId,\n        platformContentId: contentInfo.contentId,\n        contentType: contentInfo.contentType,\n        url: contentLink\n      });\n\n      // Reset and close modal\n      setContentLink('');\n      setError('');\n      onClose();\n    } catch (err) {\n      setError('Failed to process content. Please try again.');\n      console.error(\"Detailed error:\", err);\n    } finally {\n      setLoading(false);\n    }\n  };\n  if (!isOpen) return null;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\",\n    style: {\n      zIndex: 9999\n    },\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"bg-white p-6 rounded-lg shadow-xl w-96\",\n      style: {\n        zIndex: 10000\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        className: \"text-xl font-bold mb-4\",\n        children: \"Add Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: contentLink,\n        onChange: e => setContentLink(e.target.value),\n        placeholder: \"Paste video/reel/post link here\",\n        className: \"w-full p-2 border rounded mb-4\",\n        style: {\n          color: 'black'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 239,\n        columnNumber: 17\n      }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-500 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex justify-end space-x-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: onClose,\n          className: \"px-4 py-2 bg-gray-200 rounded\",\n          disabled: loading,\n          children: \"Cancel\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddContent,\n          className: \"px-4 py-2 bg-blue-500 text-white rounded\",\n          disabled: loading,\n          children: loading ? 'Processing...' : 'Add Content'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 235,\n    columnNumber: 9\n  }, this);\n};\n_s(AddPlatformModal, \"g7Z+FAFkJcFePgX63qUUdQBfpO8=\");\n_c = AddPlatformModal;\nexport default AddPlatformModal;\nvar _c;\n$RefreshReg$(_c, \"AddPlatformModal\");","map":{"version":3,"names":["React","useState","useEffect","platformService","jsxDEV","_jsxDEV","AddPlatformModal","isOpen","onClose","_s","contentLink","setContentLink","error","setError","loading","setLoading","connectedPlatforms","setConnectedPlatforms","fetchConnectedPlatforms","platforms","getUserPlatforms","console","detectPlatformInfo","url","includes","videoId","split","platformName","contentId","contentType","handleAddContent","trim","log","contentInfo","platformExists","Array","isArray","some","platform","platformId","createResult","addPlatform","success","Error","data","id","Promise","resolve","setTimeout","platformsArray","length","matchedPlatform","find","p","message","addContent","platformContentId","err","className","style","zIndex","children","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","placeholder","color","onClick","disabled","_c","$RefreshReg$"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/components/Platforms/AddPlatformModal.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport platformService from '../../services/PlatformService';\r\n\r\nconst AddPlatformModal = ({ isOpen, onClose }) => {\r\n    const [contentLink, setContentLink] = useState('');\r\n    const [error, setError] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [connectedPlatforms, setConnectedPlatforms] = useState([]);\r\n\r\n    // Fetch already connected platforms when modal opens\r\n    useEffect(() => {\r\n        if (isOpen) {\r\n            fetchConnectedPlatforms();\r\n        }\r\n    }, [isOpen]);\r\n\r\n    const fetchConnectedPlatforms = async () => {\r\n        try {\r\n            const platforms = await platformService.getUserPlatforms();\r\n            setConnectedPlatforms(platforms);\r\n        } catch (error) {\r\n            console.error(\"Error fetching platforms:\", error);\r\n        }\r\n    };\r\n\r\n    // Function to detect platform and content info from URL\r\n    const detectPlatformInfo = (url) => {\r\n        // Platform detection patterns\r\n        if (url.includes('youtube.com') || url.includes('youtu.be')) {\r\n            let videoId = '';\r\n\r\n            if (url.includes('watch?v=')) {\r\n                videoId = url.split('watch?v=')[1].split('&')[0];\r\n            } else if (url.includes('youtu.be/')) {\r\n                videoId = url.split('youtu.be/')[1].split('?')[0];\r\n            } else if (url.includes('shorts/')) {\r\n                videoId = url.split('shorts/')[1].split('?')[0];\r\n            }\r\n\r\n            return {\r\n                platformName: 'YouTube',\r\n                contentId: videoId,\r\n                contentType: url.includes('shorts/') ? 'SHORT' : 'VIDEO'\r\n            };\r\n        }\r\n        else if (url.includes('instagram.com')) {\r\n            let contentId = '';\r\n            let contentType = 'POST';\r\n\r\n            if (url.includes('/p/')) {\r\n                contentId = url.split('/p/')[1].split('/')[0];\r\n            } else if (url.includes('/reel/')) {\r\n                contentId = url.split('/reel/')[1].split('/')[0];\r\n                contentType = 'REEL';\r\n            } else if (url.includes('/stories/')) {\r\n                contentId = url.split('/stories/')[1].split('/')[1];\r\n                contentType = 'STORY';\r\n            }\r\n\r\n            return {\r\n                platformName: 'Instagram',\r\n                contentId: contentId,\r\n                contentType: contentType\r\n            };\r\n        }\r\n        else if (url.includes('tiktok.com')) {\r\n            let contentId = '';\r\n\r\n            if (url.includes('/video/')) {\r\n                contentId = url.split('/video/')[1].split('?')[0];\r\n            }\r\n\r\n            return {\r\n                platformName: 'TikTok',\r\n                contentId: contentId,\r\n                contentType: 'VIDEO'\r\n            };\r\n        }\r\n        else if (url.includes('twitter.com') || url.includes('x.com')) {\r\n            let contentId = '';\r\n\r\n            if (url.includes('/status/')) {\r\n                contentId = url.split('/status/')[1].split('?')[0];\r\n            }\r\n\r\n            return {\r\n                platformName: 'Twitter',\r\n                contentId: contentId,\r\n                contentType: 'TWEET'\r\n            };\r\n        }\r\n\r\n        return {\r\n            platformName: 'Other',\r\n            contentId: '',\r\n            contentType: 'UNKNOWN'\r\n        };\r\n    };\r\n\r\n    // Handle adding content and platform if needed\r\n    const handleAddContent = async () => {\r\n        if (!contentLink.trim()) {\r\n            setError('Please enter a valid content link');\r\n            return;\r\n        }\r\n\r\n        setLoading(true);\r\n        try {\r\n            // Detect platform and content info\r\n            console.log(\"Processing link:\", contentLink);\r\n            const contentInfo = detectPlatformInfo(contentLink);\r\n\r\n            console.log(\"Detected:\", contentInfo);\r\n            if (contentInfo.contentId === '') {\r\n                setError('Could not detect content ID from the provided link');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Check if platform is already connected\r\n            const platformExists = Array.isArray(connectedPlatforms)\r\n                ? connectedPlatforms.some(platform => platform.platformName === contentInfo.platformName)\r\n                : false;\r\n\r\n            let platformId;\r\n            console.log(\"Sending to API:\", {\r\n                platformId,\r\n                contentId: contentInfo.contentId,\r\n                contentType: contentInfo.contentType\r\n            });\r\n\r\n            // If platform doesn't exist, create it first\r\n            if (!platformExists) {\r\n                try {\r\n                    // Create the platform with more detailed logs\r\n                    console.log(\"Creating platform with name:\", contentInfo.platformName);\r\n                    const createResult = await platformService.addPlatform({\r\n                        platformName: contentInfo.platformName,\r\n                        url: contentLink\r\n                    });\r\n                    console.log(\"Platform creation result:\", createResult);\r\n\r\n                    // Check if creation was successful\r\n                    if (!createResult.success) {\r\n                        throw new Error(`Platform creation failed: ${createResult.error}`);\r\n                    }\r\n\r\n                    // Try to get the ID directly from the creation response\r\n                    if (createResult.data && createResult.data.id) {\r\n                        platformId = createResult.data.id;\r\n                        console.log(\"Got platform ID directly from creation response:\", platformId);\r\n                    } else {\r\n                        // Wait briefly then try to get all platforms\r\n                        await new Promise(resolve => setTimeout(resolve, 1000));\r\n\r\n                        // Fetch all platforms\r\n                        const platforms = await platformService.getUserPlatforms();\r\n                        console.log(\"All platforms after creation:\", platforms);\r\n\r\n                        // If we got an array directly\r\n                        const platformsArray = Array.isArray(platforms) ? platforms :\r\n                            (platforms && Array.isArray(platforms.data)) ? platforms.data : [];\r\n\r\n                        if (platformsArray.length === 0) {\r\n                            throw new Error(\"No platforms found after creation\");\r\n                        }\r\n\r\n                        // Try to find by name\r\n                        const matchedPlatform = platformsArray.find(p =>\r\n                            p.platformName === contentInfo.platformName\r\n                        );\r\n\r\n                        if (matchedPlatform) {\r\n                            platformId = matchedPlatform.id;\r\n                            console.log(\"Found platform by name match:\", platformId);\r\n                        } else {\r\n                            // Last resort - use the most recently created platform\r\n                            platformId = platformsArray[platformsArray.length - 1].id;\r\n                            console.log(\"Using most recent platform as fallback:\", platformId);\r\n                        }\r\n                    }\r\n                } catch (error) {\r\n                    console.error(\"Error in platform creation flow:\", error);\r\n                    setError(`Platform creation failed: ${error.message}`);\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n            } else {\r\n                // Find existing platform ID\r\n                const platform = connectedPlatforms.find(\r\n                    p => p.platformName === contentInfo.platformName\r\n                );\r\n\r\n                if (!platform || !platform.id) {\r\n                    console.error(\"Could not find existing platform ID\");\r\n                    setError(\"Error: Could not find platform ID\");\r\n                    setLoading(false);\r\n                    return;\r\n                }\r\n\r\n                platformId = platform.id;\r\n                console.log(\"Using existing platform ID:\", platformId);\r\n            }\r\n\r\n            // Now check that platformId is valid before proceeding\r\n            if (!platformId) {\r\n                setError(\"Error: Missing platform ID\");\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            // Now add the content to the platform\r\n            await platformService.addContent({\r\n                platformId: platformId,\r\n                platformContentId: contentInfo.contentId,\r\n                contentType: contentInfo.contentType,\r\n                url: contentLink\r\n            });\r\n\r\n            // Reset and close modal\r\n            setContentLink('');\r\n            setError('');\r\n            onClose();\r\n        } catch (err) {\r\n            setError('Failed to process content. Please try again.');\r\n            console.error(\"Detailed error:\", err);\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    };\r\n\r\n    if (!isOpen) return null;\r\n\r\n    return (\r\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center\" style={{ zIndex: 9999 }}>\r\n            <div className=\"bg-white p-6 rounded-lg shadow-xl w-96\" style={{ zIndex: 10000 }}>\r\n                <h2 className=\"text-xl font-bold mb-4\">Add Content</h2>\r\n\r\n                <input\r\n                    type=\"text\"\r\n                    value={contentLink}\r\n                    onChange={(e) => setContentLink(e.target.value)}\r\n                    placeholder=\"Paste video/reel/post link here\"\r\n                    className=\"w-full p-2 border rounded mb-4\"\r\n                    style={{ color: 'black' }}\r\n                />\r\n\r\n                {error && (\r\n                    <p className=\"text-red-500 mb-4\">{error}</p>\r\n                )}\r\n\r\n                <div className=\"flex justify-end space-x-2\">\r\n                    <button\r\n                        onClick={onClose}\r\n                        className=\"px-4 py-2 bg-gray-200 rounded\"\r\n                        disabled={loading}\r\n                    >\r\n                        Cancel\r\n                    </button>\r\n                    <button\r\n                        onClick={handleAddContent}\r\n                        className=\"px-4 py-2 bg-blue-500 text-white rounded\"\r\n                        disabled={loading}\r\n                    >\r\n                        {loading ? 'Processing...' : 'Add Content'}\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default AddPlatformModal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}