{"ast":null,"code":"import api from './ApiService';\nclass PlatformService {\n  constructor() {\n    // Use environment variable with fallback\n    //this.baseURL = 'http://localhost:8080/api';\n    this.platformsURL = '/platforms';\n    this.contentURL = '/content';\n  }\n\n  // Platform methods\n  async getUserPlatforms() {\n    try {\n      const response = await api.get(this.platformsURL);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching platforms:', error);\n      throw error;\n    }\n  }\n  async addPlatform(platformData) {\n    try {\n      console.log(\"Adding platform with data:\", platformData);\n      const response = await api.post(this.platformsURL, platformData);\n      console.log(\"Platform creation response:\", response);\n\n      // Extracting ID..\n      let platformId = null;\n      if (typeof response.data === 'string') {\n        console.log(\"Response data is a string, attempting to extract ID with regex\");\n        const idMatch = response.data.match(/\"id\"\\s*:\\s*(\\d+)/);\n        if (idMatch && idMatch[1]) {\n          platformId = parseInt(idMatch[1], 10);\n          console.log(\"Successfully extracted ID with regex:\", platformId);\n        }\n      } else if (response.data && response.data.id) {\n        platformId = response.data.id;\n        console.log(\"Found ID directly in response object:\", platformId);\n      }\n      return {\n        success: true,\n        data: {\n          id: platformId\n        },\n        status: response.status\n      };\n    } catch (error) {\n      var _error$response;\n      console.error('Error adding platform:', error);\n      return {\n        success: false,\n        error: error.message,\n        status: (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status\n      };\n    }\n  }\n\n  // Content methods\n  async addContent(contentData) {\n    try {\n      const response = await api.post(this.contentURL, contentData);\n      return response.data;\n    } catch (error) {\n      console.error('Error adding content:', error);\n      throw error;\n    }\n  }\n  async getContentByPlatform(platformId) {\n    try {\n      const response = await api.get(`${this.platformsURL}/${platformId}/content`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching content:', error);\n      throw error;\n    }\n  }\n  async getPlatformStats() {\n    try {\n      const response = await api.get(`${this.platformsURL}/stats`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching platform statistics:', error);\n      return {}; // Return empty object as fallback\n    }\n  }\n}\nexport default new PlatformService();","map":{"version":3,"names":["api","PlatformService","constructor","platformsURL","contentURL","getUserPlatforms","response","get","data","error","console","addPlatform","platformData","log","post","platformId","idMatch","match","parseInt","id","success","status","_error$response","message","addContent","contentData","getContentByPlatform","getPlatformStats"],"sources":["E:/Official/University/Content Analytics v4/Content-Analytics-System/frontend/src/services/PlatformService.jsx"],"sourcesContent":["import api from './ApiService';\r\n\r\nclass PlatformService {\r\n    constructor() {\r\n        // Use environment variable with fallback\r\n        //this.baseURL = 'http://localhost:8080/api';\r\n        this.platformsURL = '/platforms';\r\n        this.contentURL = '/content';\r\n    }\r\n\r\n    // Platform methods\r\n    async getUserPlatforms() {\r\n        try {\r\n            const response = await api.get(this.platformsURL);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching platforms:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    async addPlatform(platformData) {\r\n        try {\r\n            console.log(\"Adding platform with data:\", platformData);\r\n            const response = await api.post(this.platformsURL, platformData);\r\n            console.log(\"Platform creation response:\", response);\r\n\r\n            // Extracting ID..\r\n            let platformId = null;\r\n            if (typeof response.data === 'string') {\r\n                console.log(\"Response data is a string, attempting to extract ID with regex\");\r\n                const idMatch = response.data.match(/\"id\"\\s*:\\s*(\\d+)/);\r\n                if (idMatch && idMatch[1]) {\r\n                    platformId = parseInt(idMatch[1], 10);\r\n                    console.log(\"Successfully extracted ID with regex:\", platformId);\r\n                }\r\n            } else if (response.data && response.data.id) {\r\n                platformId = response.data.id;\r\n                console.log(\"Found ID directly in response object:\", platformId);\r\n            }\r\n\r\n            return {\r\n                success: true,\r\n                data: { id: platformId },\r\n                status: response.status\r\n            };\r\n        } catch (error) {\r\n            console.error('Error adding platform:', error);\r\n            return {\r\n                success: false,\r\n                error: error.message,\r\n                status: error.response?.status\r\n            };\r\n        }\r\n    }\r\n\r\n    // Content methods\r\n    async addContent(contentData) {\r\n        try {\r\n            const response = await api.post(this.contentURL, contentData);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error adding content:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async getContentByPlatform(platformId) {\r\n        try {\r\n            const response = await api.get(`${this.platformsURL}/${platformId}/content`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching content:', error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n\r\n    async getPlatformStats() {\r\n        try {\r\n            const response = await api.get(`${this.platformsURL}/stats`);\r\n            return response.data;\r\n        } catch (error) {\r\n            console.error('Error fetching platform statistics:', error);\r\n            return {}; // Return empty object as fallback\r\n        }\r\n    } \r\n}\r\n\r\nexport default new PlatformService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}